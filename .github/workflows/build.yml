name: Build Extension

on:
    push:
      branches: [ "main" ]
    pull_request:
      branches: [ "main" ]
    workflow_call:
      inputs:
        prerelease:
          required: false
          type: boolean
          default: false

jobs:
  build:
    runs-on: ubuntu-24.04 # ubuntu-latest which is still based on 22.04 as of now does not have right GCC lib

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm ci
      - name: Install VSCE
        run: npm i -g vsce
      - name: Read package JSON
        id: get_package_json
        run: |
          content=`cat ./package.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content" # This is deprecated, should change
          # This below should work and is not deprecated but it does not...
          #echo "packageJson=${content}" >> $GITHUB_OUTPUT
      - name: Display requested server version
        run: echo '${{ fromJson(steps.get_package_json.outputs.packageJson).server_version }}'
        env:
          PACKAGE_JSON: echo $PACKAGE_JSON
      - name: Download windows shader language server.
        uses: robinraju/release-downloader@v1.11
        env:
          PACKAGE_JSON: echo $PACKAGE_JSON
        with:
          repository: 'antaalt/shader-sense'
          tag: ${{ format('v{0}', fromJson(steps.get_package_json.outputs.packageJson).server_version) }}
          fileName: '*.zip'
          #token: '${{ secrets.GH_PAT }}'
      - name: Create bin folder
        run: mkdir ./bin
      - name: Copy windows binaries to bin
        run: mkdir ./bin/windows && unzip shader-language-server-windows.zip -d ./bin/windows && rm ./shader-language-server-windows.zip
      - name: Copy linux binaries to bin
        run: mkdir ./bin/linux && unzip shader-language-server-linux.zip -d ./bin/linux && rm ./shader-language-server-linux.zip
      - name: Copy macos binaries to bin
        run: mkdir ./bin/macos && unzip shader-language-server-macos.zip -d ./bin/macos && rm ./shader-language-server-macos.zip
      - name: Copy wasi binaries to bin
        run: mkdir ./bin/wasi && unzip shader-language-server-wasi.zip -d ./bin/wasi && rm ./shader-language-server-wasi.zip
      - name: Mark server as executable on Linux
        run: chmod +x ./bin/linux/shader-language-server
      - name: Mark server as executable on MacOS
        run: chmod +x ./bin/macos/shader-language-server
      - name: Get server version
        run: echo "SERVER_VERSION=$(./bin/linux/shader-language-server --version | sed 's/shader-language-server v//g')" >> $GITHUB_ENV
      # VScode need a framebuffer to run test. So create one.
      - name: Create framebuffer to run test
        run: sudo apt-get install xvfb
      - name: Test extension
        run: xvfb-run --auto-servernum npm test
      - name: Package extension
        if: ${{ !inputs.prerelease }}
        run: vsce package
      - name: Package prerelease extension
        if: ${{ inputs.prerelease }}
        run: vsce package --pre-release
      - name: Get version
        run: echo "PACKAGE_VERSION=$(npm pkg get version | sed 's/"//g')" >> $GITHUB_ENV
      - name: Check version
        run: echo $PACKAGE_VERSION
      - name: Copy VSIX
        run: mkdir -p ./ext/ && cp ./shader-validator-$PACKAGE_VERSION.vsix ./ext/shader-validator.vsix
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension
          path: ./ext/